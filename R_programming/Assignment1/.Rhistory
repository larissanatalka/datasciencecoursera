North_East <-within(North_East, Q45log10 <- log10(Q45))
North_East <-within(North_East, Qotherlog10 <- log10(Qother))
North_East <-within(North_East, Noqualsqrt <- sqrt(Noqual))
North_East <-within(North_East, Q1sqrt <- sqrt(Q1))
North_East <-within(North_East, Q2sqrt <- sqrt(Q2))
North_East <-within(North_East, Q3sqrt <- sqrt(Q3))
North_East <-within(North_East, Q45sqrt <- sqrt(Q45))
North_East <-within(North_East, Qothersqrt <- sqrt(Qother))
North_East <-within(North_East, Noqualinv <- 1/(Noqual))
North_East <-within(North_East, Q1inv <- 1/(Q1))
North_East <-within(North_East, Q2inv <- 1/(Q2))
North_East <-within(North_East, Q3inv <- 1/(Q3))
North_East <-within(North_East, Q45inv <- 1/(Q45))
North_East <-within(North_East, Qotherinv <- 1/(Qother))
North_East <-within(North_East, MP <- (Managerial.and.professional/All.people.aged.16...74)*100)
North_East <-within(North_East, Interm <- (Intermediate.occupations/All.people.aged.16...74)*100)
North_East <-within(North_East, Self <- (Self.employed/All.people.aged.16...74)*100)
North_East <-within(North_East, Tech <- (Technical.and.routine/All.people.aged.16...74)*100)
North_East <-within(North_East, Never <- (Never.worked/All.people.aged.16...74)*100)
North_East <-within(North_East, Long <- (Long.term.unemployed/All.people.aged.16...74)*100)
North_East <-within(North_East, Students <- (Full.time.students/All.people.aged.16...74)*100)
North_East <-within(North_East, MPlog10 <- log10(MP))
North_East <-within(North_East, Intermlog10 <- log10(Interm))
North_East <-within(North_East, Selflog10 <- log10(Self))
North_East <-within(North_East, Techlog10 <- log10(Tech))
North_East <-within(North_East, Neverlog10 <- log10(Never))
North_East <-within(North_East, Longlog10 <- log10(Long))
North_East <-within(North_East, Studentslog10 <- log10(Students))
North_East <-within(North_East, MPsqrt <- sqrt(MP))
North_East <-within(North_East, Intermsqrt <- sqrt(Interm))
North_East <-within(North_East, Selfsqrt <- sqrt(Self))
North_East <-within(North_East, Techsqrt <- sqrt(Tech))
North_East <-within(North_East, Neversqrt <- sqrt(Never))
North_East <-within(North_East, Longsqrt <- sqrt(Long))
North_East <-within(North_East, Studentssqrt <- sqrt(Students))
North_East <-within(North_East, MPinv <- 1/(MP))
North_East <-within(North_East, Interminv <- 1/(Interm))
North_East <-within(North_East, Selfinv <- 1/(Self))
North_East <-within(North_East, Techinv <- 1/(Tech))
North_East <-within(North_East, Neverinv <- 1/(Never))
North_East <-within(North_East, Longinv <- 1/(Long))
North_East <-within(North_East, Studentsinv <- 1/(Students))
North_East <-within(North_East, Males37less <- (Males.FT.31.37.Percentage+Males.PT.16.30.Percentage+Males.PT.6.15.Percentage+Males.PT.1.5.Percentage))
North_East <-within(North_East, Males37andmore<-(Males.FT.38.48.Percentage+Males.FT.49..Percentage))
North_East <-within(North_East, Females37less <- (Females.FT.31.37.Percentage+Females.PT.16.30.Percentage+Females.PT.6.15.Percentage+Females.PT.1.5.Percentage))
North_East <-within(North_East, Females37andmore<-(Females.FT.38.48.Percentage+Females.FT.49..Percentage))
North_East <-within(North_East, Males37lessc <- (Males.FT.31.37.Count+Males.PT.16.30.Count+Males.PT.6.15.Count+Males.PT.1.5.Count))
North_East <-within(North_East, Males37andmorec<-(Males.FT.38.48.Count+Males.FT.49..Count))
North_East <-within(North_East, Females37lessc <- (Females.FT.31.37.Count+Females.PT.16.30.Count+Females.PT.6.15.Count+Females.PT.1.5.Count))
North_East <-within(North_East, Females37andmorec<-(Females.FT.38.48.Count+Females.FT.49..Count))
Districts <-within(Districts, Eplog10 <- log10(EpisodesPerThou))
Districts <-within(Districts, Crimeslog10 <- log10(CrimesPerThou))
Districts <-within(Districts, GPlog10 <- log10(GPperThou))
Districts <-within(Districts, Epsqrt <- sqrt(EpisodesPerThou))
Districts <-within(Districts, Crimessqrt <- sqrt(CrimesPerThou))
Districts <-within(Districts, GPsqrt <- sqrt(GPperThou))
Districts <-within(Districts, Epinv <- 1/(EpisodesPerThou))
Districts <-within(Districts, Crimesinv <- 1/(CrimesPerThou))
Districts <-within(Districts, GPinv <- 1/(GPperThou))
#Histogram.0-19. Dens
hist<-hist(Age0to19, col="light blue", border="dark blue", freq=F, ylim=c(0,0.4),
xlab="percentage of Total Population", main="% of Population Aged 0-19")
#Density curve
lines (density(sort(Age0to19)))
#Add 'normal' curves to each histogram
xfit <-seq(from=min(Age0to19),to=max(Age0to19),by=0.1)
yfit = dnorm (xfit, mean(Age0to19), sd(Age0to19))
lines(xfit, yfit, lty="dotted")
rm(xfit,yfit)
#Histogram.20-64. Dens
hist(Age20to64, col="light blue", border="dark blue", freq=F, ylim=c(0,0.4),
xlab="percentage of Total Population", main="% of Population Aged 20-64")
#Density curve
lines (density(sort(Age20to64)))
#Add 'normal' curves to each histogram
xfit <-seq(from=min(Age20to64), to=max(Age20to64),by=0.1)
yfit = dnorm (xfit, mean(Age20to64), sd(Age20to64))
lines(xfit, yfit, lty=2)
rm(xfit,yfit)
#Histogram.65 plus. Dens
hist(Age65plus, col="light blue", border="dark blue", freq=F, ylim=c(0,0.4),
xlab="percentage of Total Population", main="% of Population Aged 65 +")
#Density curve
lines (density(sort(Age65plus)))
#Add 'normal' curves to each histogram
xfit <-seq(from=min(Age65plus),to=max(Age65plus),by=0.1)
yfit = dnorm (xfit, mean(Age65plus), sd(Age65plus))
lines(xfit, yfit, lty=2)
rm(xfit,yfit)
par(mfrow=c(1,1))
boxplot(Age0to19, Age20to64, Age65plus,names=c("Age 0 to 19","Age 20 to 64","Age 65 +"),xlab="Age Group", ylab="Percentage")
boxdata <- boxplot(North_East$Age0to19,North_East$Age20to64,North_East$Age65plus,names=c("0-19","20-64","65+"), xlab="Age Group", ylab="Percentage")
for(i in 1:length(boxdata$group)){
#add text to the boxplot
text(boxdata$group[i], boxdata$out[i],
c(which(North_East$Age0to19==boxdata$out[i]),which(North_East$Age20to64==boxdata$out[i]),which(North_East$Age65plus==boxdata$out[i])),pos=4,cex=0.7)}
qqnorm(Age0to19, xlab = "Theoretical Quantiles: Age0to19")
qqline(Age0to19, col=1)
qqnorm(Age20to64, xlab = "Theoretical Quantiles: Age20to64")
qqline(Age20to64, col=1)
qqnorm(Age65plus, xlab = "Theoretical Quantiles: Age65plus")
qqline(Age65plus, col=1)
par(mfrow=c(1,3))
qqnorm(Age0to19, xlab = "Theoretical Quantiles: Age0to19")
qqline(Age0to19, col=1)
qqnorm(Age20to64, xlab = "Theoretical Quantiles: Age20to64")
qqline(Age20to64, col=1)
qqnorm(Age65plus, xlab = "Theoretical Quantiles: Age65plus")
qqline(Age65plus, col=1)
cor(Life_Male,Life_Female, method=c("spearman"))
cor.test(Life_Male, Life_Female, method="spearman")
#Scatter plot
plot(Age0to19,col="purple",pch=16,cex=1,main="Plot of the % of those in each age group",ylab="Percentage of population",ylim=range(c(Age0to19,Age20to64,Age65plus)))
par(new=TRUE)
plot(Age20to64,col="red",pch=16,cex=1,main="Plot of the % of those in each age group",ylab="Percentage of population",ylim=range(c(Age0to19,Age20to64,Age65plus)))
par(new=TRUE)
plot(Age65plus,col="green",pch=16,cex=1,main="Plot of the % of those in each age group",ylab="Percentage of population",,ylim=range(c(Age0to19,Age20to64,Age65plus)))
lines(Age0to19,pch=22,lty=2,col="purple")
lines(Age20to64,pch=22,lty=2,col="red")
lines(Age65plus,pch=22,lty=2,col="green")
legend(28,50,c("Age0to19","Age20to64","Age65plus"),lty=c(2,2,2),pch=c(22,22,22),col=c("purple","red","green"))
t.test(Age0to19~Region, var.equal=TRUE)
t.test(Age20to64~Region, var.equal=TRUE)
t.test(Age65plus, var.equal=TRUE)
Qualifications<-data.frame(North_East$Noquallog10,North_East$Q1log10,North_East$Q2log10,North_East$Q3log10,North_East$Q45log10,North_East$Qotherlog10)
cor.matrix<-cor(Qualifications, use="complete.obs", method="spearman")
print(cor.df,digits=3)
print(cor.matrix,digits=3)
plot(Qualifications)
t.test(Male.Avg.Hours,Female.Avg.Hours,paired=TRUE,alternative="greater")
t.test(Male.Avg.Hours~Region, var.equal=TRUE)
t.test(Female.Avg.Hours~Region, var.equal=TRUE)
#Test assumption of homogeneity of variance.
var.test(Male.Avg.Hours,Female.Avg.Hours)
var.test(Male.Avg.Hours~Region)
var.test(Female.Avg.Hours~Region)
mahw<-ggplot(North_East, aes(Region,Male.Avg.Hours))
mahw+geom_boxplot(outlier.colour="blue",outlier.size=3,fill="white",colour="black")+labs(x="Region",y="Average Hours Worked")
fahw<-ggplot(North_East, aes(Region,Female.Avg.Hours))
fahw+geom_boxplot(outlier.colour="red", outlier.size=3)+labs(x="Region",y="Average Hours Worked")
plot(Male.Avg.Hours,col="blue",pch=16,cex=1,main="Average Hours Worked",ylab="Average Hours Worked",ylim=range(c(Male.Avg.Hours,Female.Avg.Hours)))
par(new=TRUE)
plot(Female.Avg.Hours,col="red",pch=16,cex=1,main="Average Hours Worked",ylab="Average Hours Worked",ylim=range(c(Male.Avg.Hours,Female.Avg.Hours)))
lines(Male.Avg.Hours,pch=22,lty=2,col="purple")
lines(Female.Avg.Hours,pch=22,lty=2,col="red")
legend(35,40,c("Males","Females"),lty=c(2,2),pch=c(22,22),col=c("blue","red"))
par(mfrow=c(1,1))
boxplot(Male.Avg.Hours, Female.Avg.Hours,names=c("Male","Female"),xlab="Gender", ylab="Average number of hours worked")
boxdata <- boxplot(North_East$Male.Avg.Hours,North_East$Female.Avg.Hours,names=c("Male","Female"), xlab="Gender", ylab="Average number of hours worked",ylim=c(28.19,45.66))
for(i in 1:length(boxdata$group)){
#add text to the boxplot
text(boxdata$group[i], boxdata$out[i],
c(which(North_East$Male.Avg.Hours==boxdata$out[i]),which(North_East$Female.Avg.Hours==boxdata$out[i])),pos=4,cex=0.7)}
manova.results<-manova(cbind(Eplog10,Crimeslog10,GPlog10)~Area_type,data=Districts)
summary(manova.results)
plot(manova.results,1)
plot(manova.results,2)
fitanova1<-aov(Eplog10~Area_type)
summary(fitanova1)
fitanova1.mod=data.frame(Fitted=fitted(fitanova1), Residuals = resid(fitanova1), District=districts3)
plot(fitanova1,1)
plot(fitanova1,2)
plot(prcomp(lifefactorswork[,3:6]))
lifefactorswork<-data.frame(Life_Male,M38prop,X.Smoking,X.Binge.Drinking,X.Obese,X.Healthy.Eating)
M38
North_East <-within(North_East, M38 <- (Males.FT.38.48.Count+Males.FT.49..Count))
North_East <-within(North_East, F38 <- (Females.FT.38.48.Count+Females.FT.49..Count))
attach(North_East)
North_East <-within(North_East, M38prop <- (M38/All.males.aged.16.74.in.employment)*100)
attach(North_East)
lifefactorswork<-data.frame(Life_Male,M38prop,X.Smoking,X.Binge.Drinking,X.Obese,X.Healthy.Eating)
lifefactorswork.prc<-princomp(lifefactorswork[,2:6])
prcomp(lifefactorswork[,2:6],scale = TRUE)
plot(prcomp(lifefactorswork[,3:6]))
lifefactorswork.prc
summary(lifefactorswork.prc, loadings=TRUE,digits=2)
plot(pc1$values,type="b")
pc1<-principal(lifefactorswork[,2:6],nfactors=5,rotate="none")
round(lifefactorsworkmatrix,2)#rounds to 2dp
summary(lifefactorswork.prc, loadings=TRUE,digits=2)
#Create a correlation matrix of the lifefactorswork data frame
lifefactorsworkmatrix<-cor(lifefactorswork[,2:6])
round(lifefactorsworkmatrix,2)#rounds to 2dp
#Run bartlett test on either the correlation matrix
cortest.bartlett(lifefactorswork[,2:6])
#Want this test to be significant i.e. p-value<0.05
#This is true, therefore factor analysis is appropriate.
det(lifefactorsworkmatrix)
#The value 0.017 does not appear to be problematic.
pc1<-principal(lifefactorswork[,2:6],nfactors=5,rotate="none")
pc1
plot(pc1$values,type="b")
pc1<-principal(lifefactorswork[,2:6],nfactors=5,rotate="none")
install.packages(corpor)
install.packages("corpor")
isntall.packages("GPArotation")
install.packages("GPArotation")
library(psych)
pc1<-principal(lifefactorswork[,2:6],nfactors=5,rotate="none")
pc1
#Eigenvalues suggest extracting 2, but look at screeplot too.
plot(pc1$values,type="b")
fitanova1<-aov(Eplog10~Area_type)
summary(fitanova1)
fitanova1.mod=data.frame(Fitted=fitted(fitanova1), Residuals = resid(fitanova1), District=districts3)
plot(fitanova1,1)
plot(fitanova1,2)
ggplot(fitanova1.mod,aes(Fitted, Residuals, colour=District))+geom_point()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
setwd("C:/Users/Larissa/datasciencecoursera/datasciencecoursera/R_programmin/Assignment1")
setwd("C:/Users/Larissa/datasciencecoursera/R_programming/Assignment1")
setwd("C:/Users/Larissa/datasciencecoursera/datasciencecoursera/R_programmin/Assignment1")
setwd("C:/Users/Larissa/datasciencecoursera/datasciencecoursera/R_programmin/Assignment1")
setwd("C:/Users/Larissa/datasciencecoursera/datasciencecoursera/R_programmin/Assignment1")
setwd("C:/Users/Larissa/datasciencecoursera/datasciencecoursera/R_programmin/Assignment1")
submit()
submit()
submit()
source("submitscript1.R")
source("submitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("submitscript1.R")
submit <- local({
getOutput <- function(sid) {
## JUST FOR TESTING
## sid <- sub("-dev", "", sid, fixed = TRUE)
if(sid == "pollutantmean-1") {
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
}
else if(sid == "pollutantmean-2") {
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 70:72)
}
else if(sid == "pollutantmean-3") {
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 34)
}
else if(sid == "pollutantmean-4") {
source("pollutantmean.R")
pollutantmean("specdata", "nitrate")
}
else if(sid == "complete-1") {
source("complete.R")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
paste(cc$nobs, collapse = "\n")
}
else if(sid == "complete-2") {
source("complete.R")
cc <- complete("specdata", 54)
cc$nobs
}
else if(sid == "complete-3") {
source("complete.R")
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
paste(cc[use, "nobs"], collapse = "\n")
}
else if(sid == "corr-1") {
source("corr.R")
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
paste(out, collapse = "\n")
}
else if(sid == "corr-2") {
source("corr.R")
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
paste(out, collapse = "\n")
}
else if(sid == "corr-3") {
source("corr.R")
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
paste(c(n, round(cr, 4)), collapse = "\n")
}
else {
stop("invalid part number")
}
}
partPrompt <- function() {
partlist <- list("pollutantmean-1" = "'pollutantmean' part 1",
"pollutantmean-2" = "'pollutantmean' part 2",
"pollutantmean-3" = "'pollutantmean' part 3",
"pollutantmean-4" = "'pollutantmean' part 4",
"complete-1" = "'complete' part 1",
"complete-2" = "'complete' part 2",
"complete-3" = "'complete' part 3",
"corr-1" = "'corr' part 1",
"corr-2" = "'corr' part 2",
"corr-3" = "'corr' part 3"
)
pretty_out("Which part are you submitting?")
part <- select.list(partlist, graphics=FALSE)
names(part)
}
getChallenge <- function(email, challenge.url) {
params <- list(email_address = email,
response_encoding = "delim")
result <- getForm(challenge.url, .params = params)
s <- strsplit(result, "|", fixed = TRUE)[[1]]
list(ch.key = s[5], state = s[7])
}
challengeResponse <- function(password, ch.key) {
x <- paste(ch.key, password, sep = "")
digest(x, algo = "sha1", serialize = FALSE)
}
submitSolution <- function(email, ch.resp, sid, output, signature, submit.url,
src = "", http.version = NULL) {
output <- as.character(base64(output))
src <- as.character(base64(src))
params <- list(assignment_part_sid = sid,
email_address = email,
submission = output,
submission_aux = src,
challenge_response = ch.resp,
state = signature)
params <- lapply(params, URLencode)
result <- postForm(submit.url, .params = params)
s <- strsplit(result, "\\r\\n")[[1]]
tail(s, 1)
}
get_courseid <- function() {
pretty_out("The first item I need is your Course ID. For example, if the",
"homepage for your Coursera course was",
"'https://class.coursera.org/rprog-001',",
"then your course ID would be 'rprog-001' (without the quotes).", skip_after=TRUE)
repeat {
courseid <- readline("Course ID: ")
## Remove quotes if there are any
courseid <- gsub("\'|\"", "", courseid)
## Set up test cases
is_url <- str_detect(courseid, "www[.]|http:|https:")
is_numbers <- str_detect(courseid, "^[0-9]+$")
is_example <- str_detect(courseid, fixed("rprog-001"))
## Check if courseid is none of the bad things
if(!any(is_url, is_numbers, is_example)){
break
## courseid is one of the bad things
} else {
## Check if courseid is a url
if(is_url) {
pretty_out("It looks like you entered a web address, which is not what I'm",
"looking for.")
}
## Check if courseid is all numbers
if(is_numbers) {
pretty_out("It looks like you entered a numeric ID, which is not what I'm",
"looking for.")
}
## Check if the user stole the example courseid
if(is_example) {
pretty_out("It looks like you entered the Course ID that I used as an",
"example, which is not what I'm looking for.")
}
}
pretty_out("Instead, I need your Course ID, which is the last",
"part of the web address for your Coursera course.",
"For example, if the homepage for your Coursera course was",
"'https://class.coursera.org/rprog-001',",
"then your course ID would be 'rprog-001' (without the quotes).",
skip_after=TRUE)
}
courseid
}
pretty_out <- function(..., skip_before=TRUE, skip_after=FALSE) {
wrapped <- strwrap(str_c(..., sep = " "),
width = getOption("width") - 2)
mes <- str_c("| ", wrapped, collapse = "\n")
if(skip_before) mes <- paste0("\n", mes)
if(skip_after) mes <- paste0(mes, "\n")
message(mes)
}
checkPkgs <- function() {
pkg.inst <- installed.packages()
pkgs <- c("RCurl", "digest", "stringr")
have.pkg <- pkgs %in% rownames(pkg.inst)
if(any(!have.pkg)) {
message("\nSome packages need to be installed.\n")
r <- readline("Install necessary packages [y/n]? ")
if(tolower(r) == "y") {
need <- pkgs[!have.pkg]
message("\nInstalling packages ",
paste(need, collapse = ", "))
install.packages(need)
}
}
}
loginPrompt <- function() {
courseid <- get_courseid()
email <- readline("Submission login (email): ")
passwd <- readline("Submission  password: ")
r <- list(courseid = courseid, email = email, passwd = passwd)
assign(".CourseraLogin", r, globalenv())
invisible(r)
}
function(manual = FALSE, resetLogin = FALSE) {
checkPkgs()
suppressPackageStartupMessages(library(RCurl))
library(digest)
library(stringr)
readline("\nPress Enter to continue...")
if(!manual) {
confirmed <- FALSE
need2fix <- FALSE
while(!confirmed) {
if(exists(".CourseraLogin") && !resetLogin && !need2fix)
cred <- get(".CourseraLogin")
else
cred <- loginPrompt()
if(!is.list(cred) || !(names(cred) %in% c("email", "passwd", "courseid")))
stop("problem with login/password")
courseid <- cred$courseid
email <- cred$email
password <- cred$passwd
pretty_out("Is the following information correct?",
skip_after=TRUE)
message("Course ID: ", courseid,
"\nSubmission login (email): ", email,
"\nSubmission password: ", password)
yn <- c("Yes, go ahead!",
"No, I need to change something.")
confirmed <- identical(select.list(yn, graphics=FALSE), yn[1])
if(!confirmed) need2fix <- TRUE
}
## Set urls based on confirmed courseid
challenge.url <- paste("http://class.coursera.org", courseid,
"assignment/challenge", sep = "/")
submit.url <- paste("http://class.coursera.org", courseid,
"assignment/submit", sep = "/")
}
## Prompt Submission Part
sid <- partPrompt()
## Get output
output <- getOutput(sid)
if(!manual) {
## Get challenge
ch <- try(getChallenge(email, challenge.url), silent=TRUE)
## Check if url is valid, i.e. challenge received
ch_ok <- !is(ch, "try-error") && exists("ch.key", ch) && !is.na(ch$ch.key)
if(!ch_ok) {
stop("Either the course ID you entered is not valid or your course site ",
"is unreachable at this time. If you'd like to submit manually, you ",
"can run submit(manual=TRUE).")
}
## Attempt submission with challenge
ch.resp <- challengeResponse(password, ch$ch.key)
results <- submitSolution(email, ch.resp, sid, output, ch$state,
submit.url = submit.url)
if(!length(results))
results <- "Incorrect!"
cat("Result: ", results, "\n")
}
else {
outfile <- paste(sid, "output.txt", sep = "-")
writeLines(as.character(output), outfile)
cat(sprintf("Please upload the file '%s' to Coursera\n",
outfile))
}
invisible()
}
})
#Set working directory.
setwd("C:/Users/Larissa/datasciencecoursera/datasciencecoursera/R_programming/Assignment1")
#list.files()
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
# set working directory
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(round(result, 3))
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
source("pollutantmean.R")
submit()
submit()
submit()
submit()
