North_East <-within(North_East, Q3log10 <- log10(Q3))
North_East <-within(North_East, Q45log10 <- log10(Q45))
North_East <-within(North_East, Qotherlog10 <- log10(Qother))
---
North_East <-within(North_East, Noqualsqrt <- sqrt(Noqual))
North_East <-within(North_East, Noquallog10 <- log10(Noqual))
North_East <-within(North_East, Q1log10 <- log10(Q1))
North_East <-within(North_East, Q2log10 <- log10(Q2))
North_East <-within(North_East, Q3log10 <- log10(Q3))
North_East <-within(North_East, Q45log10 <- log10(Q45))
North_East <-within(North_East, Qotherlog10 <- log10(Qother))
North_East <-within(North_East, Noqualsqrt <- sqrt(Noqual))
North_East <-within(North_East, Q1sqrt <- sqrt(Q1))
North_East <-within(North_East, Q2sqrt <- sqrt(Q2))
North_East <-within(North_East, Q3sqrt <- sqrt(Q3))
North_East <-within(North_East, Q45sqrt <- sqrt(Q45))
North_East <-within(North_East, Qothersqrt <- sqrt(Qother))
North_East <-within(North_East, Noqualinv <- 1/(Noqual))
North_East <-within(North_East, Q1inv <- 1/(Q1))
North_East <-within(North_East, Q2inv <- 1/(Q2))
North_East <-within(North_East, Q3inv <- 1/(Q3))
North_East <-within(North_East, Q45inv <- 1/(Q45))
North_East <-within(North_East, Qotherinv <- 1/(Qother))
North_East <-within(North_East, MP <- (Managerial.and.professional/All.people.aged.16...74)*100)
North_East <-within(North_East, Interm <- (Intermediate.occupations/All.people.aged.16...74)*100)
North_East <-within(North_East, Self <- (Self.employed/All.people.aged.16...74)*100)
North_East <-within(North_East, Tech <- (Technical.and.routine/All.people.aged.16...74)*100)
North_East <-within(North_East, Never <- (Never.worked/All.people.aged.16...74)*100)
North_East <-within(North_East, Long <- (Long.term.unemployed/All.people.aged.16...74)*100)
North_East <-within(North_East, Students <- (Full.time.students/All.people.aged.16...74)*100)
North_East <-within(North_East, MPlog10 <- log10(MP))
North_East <-within(North_East, Intermlog10 <- log10(Interm))
North_East <-within(North_East, Selflog10 <- log10(Self))
North_East <-within(North_East, Techlog10 <- log10(Tech))
North_East <-within(North_East, Neverlog10 <- log10(Never))
North_East <-within(North_East, Longlog10 <- log10(Long))
North_East <-within(North_East, Studentslog10 <- log10(Students))
North_East <-within(North_East, MPsqrt <- sqrt(MP))
North_East <-within(North_East, Intermsqrt <- sqrt(Interm))
North_East <-within(North_East, Selfsqrt <- sqrt(Self))
North_East <-within(North_East, Techsqrt <- sqrt(Tech))
North_East <-within(North_East, Neversqrt <- sqrt(Never))
North_East <-within(North_East, Longsqrt <- sqrt(Long))
North_East <-within(North_East, Studentssqrt <- sqrt(Students))
North_East <-within(North_East, MPinv <- 1/(MP))
North_East <-within(North_East, Interminv <- 1/(Interm))
North_East <-within(North_East, Selfinv <- 1/(Self))
North_East <-within(North_East, Techinv <- 1/(Tech))
North_East <-within(North_East, Neverinv <- 1/(Never))
North_East <-within(North_East, Longinv <- 1/(Long))
North_East <-within(North_East, Studentsinv <- 1/(Students))
North_East <-within(North_East, Males37less <- (Males.FT.31.37.Percentage+Males.PT.16.30.Percentage+Males.PT.6.15.Percentage+Males.PT.1.5.Percentage))
North_East <-within(North_East, Males37andmore<-(Males.FT.38.48.Percentage+Males.FT.49..Percentage))
North_East <-within(North_East, Females37less <- (Females.FT.31.37.Percentage+Females.PT.16.30.Percentage+Females.PT.6.15.Percentage+Females.PT.1.5.Percentage))
North_East <-within(North_East, Females37andmore<-(Females.FT.38.48.Percentage+Females.FT.49..Percentage))
North_East <-within(North_East, Males37lessc <- (Males.FT.31.37.Count+Males.PT.16.30.Count+Males.PT.6.15.Count+Males.PT.1.5.Count))
North_East <-within(North_East, Males37andmorec<-(Males.FT.38.48.Count+Males.FT.49..Count))
North_East <-within(North_East, Females37lessc <- (Females.FT.31.37.Count+Females.PT.16.30.Count+Females.PT.6.15.Count+Females.PT.1.5.Count))
North_East <-within(North_East, Females37andmorec<-(Females.FT.38.48.Count+Females.FT.49..Count))
Districts <-within(Districts, Eplog10 <- log10(EpisodesPerThou))
Districts <-within(Districts, Crimeslog10 <- log10(CrimesPerThou))
Districts <-within(Districts, GPlog10 <- log10(GPperThou))
Districts <-within(Districts, Epsqrt <- sqrt(EpisodesPerThou))
Districts <-within(Districts, Crimessqrt <- sqrt(CrimesPerThou))
Districts <-within(Districts, GPsqrt <- sqrt(GPperThou))
Districts <-within(Districts, Epinv <- 1/(EpisodesPerThou))
Districts <-within(Districts, Crimesinv <- 1/(CrimesPerThou))
Districts <-within(Districts, GPinv <- 1/(GPperThou))
#Histogram.0-19. Dens
hist<-hist(Age0to19, col="light blue", border="dark blue", freq=F, ylim=c(0,0.4),
xlab="percentage of Total Population", main="% of Population Aged 0-19")
#Density curve
lines (density(sort(Age0to19)))
#Add 'normal' curves to each histogram
xfit <-seq(from=min(Age0to19),to=max(Age0to19),by=0.1)
yfit = dnorm (xfit, mean(Age0to19), sd(Age0to19))
lines(xfit, yfit, lty="dotted")
rm(xfit,yfit)
#Histogram.20-64. Dens
hist(Age20to64, col="light blue", border="dark blue", freq=F, ylim=c(0,0.4),
xlab="percentage of Total Population", main="% of Population Aged 20-64")
#Density curve
lines (density(sort(Age20to64)))
#Add 'normal' curves to each histogram
xfit <-seq(from=min(Age20to64), to=max(Age20to64),by=0.1)
yfit = dnorm (xfit, mean(Age20to64), sd(Age20to64))
lines(xfit, yfit, lty=2)
rm(xfit,yfit)
#Histogram.65 plus. Dens
hist(Age65plus, col="light blue", border="dark blue", freq=F, ylim=c(0,0.4),
xlab="percentage of Total Population", main="% of Population Aged 65 +")
#Density curve
lines (density(sort(Age65plus)))
#Add 'normal' curves to each histogram
xfit <-seq(from=min(Age65plus),to=max(Age65plus),by=0.1)
yfit = dnorm (xfit, mean(Age65plus), sd(Age65plus))
lines(xfit, yfit, lty=2)
rm(xfit,yfit)
par(mfrow=c(1,1))
boxplot(Age0to19, Age20to64, Age65plus,names=c("Age 0 to 19","Age 20 to 64","Age 65 +"),xlab="Age Group", ylab="Percentage")
boxdata <- boxplot(North_East$Age0to19,North_East$Age20to64,North_East$Age65plus,names=c("0-19","20-64","65+"), xlab="Age Group", ylab="Percentage")
for(i in 1:length(boxdata$group)){
#add text to the boxplot
text(boxdata$group[i], boxdata$out[i],
c(which(North_East$Age0to19==boxdata$out[i]),which(North_East$Age20to64==boxdata$out[i]),which(North_East$Age65plus==boxdata$out[i])),pos=4,cex=0.7)}
qqnorm(Age0to19, xlab = "Theoretical Quantiles: Age0to19")
qqline(Age0to19, col=1)
qqnorm(Age20to64, xlab = "Theoretical Quantiles: Age20to64")
qqline(Age20to64, col=1)
qqnorm(Age65plus, xlab = "Theoretical Quantiles: Age65plus")
qqline(Age65plus, col=1)
par(mfrow=c(1,3))
qqnorm(Age0to19, xlab = "Theoretical Quantiles: Age0to19")
qqline(Age0to19, col=1)
qqnorm(Age20to64, xlab = "Theoretical Quantiles: Age20to64")
qqline(Age20to64, col=1)
qqnorm(Age65plus, xlab = "Theoretical Quantiles: Age65plus")
qqline(Age65plus, col=1)
cor(Life_Male,Life_Female, method=c("spearman"))
cor.test(Life_Male, Life_Female, method="spearman")
#Scatter plot
plot(Age0to19,col="purple",pch=16,cex=1,main="Plot of the % of those in each age group",ylab="Percentage of population",ylim=range(c(Age0to19,Age20to64,Age65plus)))
par(new=TRUE)
plot(Age20to64,col="red",pch=16,cex=1,main="Plot of the % of those in each age group",ylab="Percentage of population",ylim=range(c(Age0to19,Age20to64,Age65plus)))
par(new=TRUE)
plot(Age65plus,col="green",pch=16,cex=1,main="Plot of the % of those in each age group",ylab="Percentage of population",,ylim=range(c(Age0to19,Age20to64,Age65plus)))
lines(Age0to19,pch=22,lty=2,col="purple")
lines(Age20to64,pch=22,lty=2,col="red")
lines(Age65plus,pch=22,lty=2,col="green")
legend(28,50,c("Age0to19","Age20to64","Age65plus"),lty=c(2,2,2),pch=c(22,22,22),col=c("purple","red","green"))
t.test(Age0to19~Region, var.equal=TRUE)
t.test(Age20to64~Region, var.equal=TRUE)
t.test(Age65plus, var.equal=TRUE)
Qualifications<-data.frame(North_East$Noquallog10,North_East$Q1log10,North_East$Q2log10,North_East$Q3log10,North_East$Q45log10,North_East$Qotherlog10)
cor.matrix<-cor(Qualifications, use="complete.obs", method="spearman")
print(cor.df,digits=3)
print(cor.matrix,digits=3)
plot(Qualifications)
t.test(Male.Avg.Hours,Female.Avg.Hours,paired=TRUE,alternative="greater")
t.test(Male.Avg.Hours~Region, var.equal=TRUE)
t.test(Female.Avg.Hours~Region, var.equal=TRUE)
#Test assumption of homogeneity of variance.
var.test(Male.Avg.Hours,Female.Avg.Hours)
var.test(Male.Avg.Hours~Region)
var.test(Female.Avg.Hours~Region)
mahw<-ggplot(North_East, aes(Region,Male.Avg.Hours))
mahw+geom_boxplot(outlier.colour="blue",outlier.size=3,fill="white",colour="black")+labs(x="Region",y="Average Hours Worked")
fahw<-ggplot(North_East, aes(Region,Female.Avg.Hours))
fahw+geom_boxplot(outlier.colour="red", outlier.size=3)+labs(x="Region",y="Average Hours Worked")
plot(Male.Avg.Hours,col="blue",pch=16,cex=1,main="Average Hours Worked",ylab="Average Hours Worked",ylim=range(c(Male.Avg.Hours,Female.Avg.Hours)))
par(new=TRUE)
plot(Female.Avg.Hours,col="red",pch=16,cex=1,main="Average Hours Worked",ylab="Average Hours Worked",ylim=range(c(Male.Avg.Hours,Female.Avg.Hours)))
lines(Male.Avg.Hours,pch=22,lty=2,col="purple")
lines(Female.Avg.Hours,pch=22,lty=2,col="red")
legend(35,40,c("Males","Females"),lty=c(2,2),pch=c(22,22),col=c("blue","red"))
par(mfrow=c(1,1))
boxplot(Male.Avg.Hours, Female.Avg.Hours,names=c("Male","Female"),xlab="Gender", ylab="Average number of hours worked")
boxdata <- boxplot(North_East$Male.Avg.Hours,North_East$Female.Avg.Hours,names=c("Male","Female"), xlab="Gender", ylab="Average number of hours worked",ylim=c(28.19,45.66))
for(i in 1:length(boxdata$group)){
#add text to the boxplot
text(boxdata$group[i], boxdata$out[i],
c(which(North_East$Male.Avg.Hours==boxdata$out[i]),which(North_East$Female.Avg.Hours==boxdata$out[i])),pos=4,cex=0.7)}
manova.results<-manova(cbind(Eplog10,Crimeslog10,GPlog10)~Area_type,data=Districts)
summary(manova.results)
plot(manova.results,1)
plot(manova.results,2)
fitanova1<-aov(Eplog10~Area_type)
summary(fitanova1)
fitanova1.mod=data.frame(Fitted=fitted(fitanova1), Residuals = resid(fitanova1), District=districts3)
plot(fitanova1,1)
plot(fitanova1,2)
plot(prcomp(lifefactorswork[,3:6]))
lifefactorswork<-data.frame(Life_Male,M38prop,X.Smoking,X.Binge.Drinking,X.Obese,X.Healthy.Eating)
M38
North_East <-within(North_East, M38 <- (Males.FT.38.48.Count+Males.FT.49..Count))
North_East <-within(North_East, F38 <- (Females.FT.38.48.Count+Females.FT.49..Count))
attach(North_East)
North_East <-within(North_East, M38prop <- (M38/All.males.aged.16.74.in.employment)*100)
attach(North_East)
lifefactorswork<-data.frame(Life_Male,M38prop,X.Smoking,X.Binge.Drinking,X.Obese,X.Healthy.Eating)
lifefactorswork.prc<-princomp(lifefactorswork[,2:6])
prcomp(lifefactorswork[,2:6],scale = TRUE)
plot(prcomp(lifefactorswork[,3:6]))
lifefactorswork.prc
summary(lifefactorswork.prc, loadings=TRUE,digits=2)
plot(pc1$values,type="b")
pc1<-principal(lifefactorswork[,2:6],nfactors=5,rotate="none")
round(lifefactorsworkmatrix,2)#rounds to 2dp
summary(lifefactorswork.prc, loadings=TRUE,digits=2)
#Create a correlation matrix of the lifefactorswork data frame
lifefactorsworkmatrix<-cor(lifefactorswork[,2:6])
round(lifefactorsworkmatrix,2)#rounds to 2dp
#Run bartlett test on either the correlation matrix
cortest.bartlett(lifefactorswork[,2:6])
#Want this test to be significant i.e. p-value<0.05
#This is true, therefore factor analysis is appropriate.
det(lifefactorsworkmatrix)
#The value 0.017 does not appear to be problematic.
pc1<-principal(lifefactorswork[,2:6],nfactors=5,rotate="none")
pc1
plot(pc1$values,type="b")
pc1<-principal(lifefactorswork[,2:6],nfactors=5,rotate="none")
install.packages(corpor)
install.packages("corpor")
isntall.packages("GPArotation")
install.packages("GPArotation")
library(psych)
pc1<-principal(lifefactorswork[,2:6],nfactors=5,rotate="none")
pc1
#Eigenvalues suggest extracting 2, but look at screeplot too.
plot(pc1$values,type="b")
fitanova1<-aov(Eplog10~Area_type)
summary(fitanova1)
fitanova1.mod=data.frame(Fitted=fitted(fitanova1), Residuals = resid(fitanova1), District=districts3)
plot(fitanova1,1)
plot(fitanova1,2)
ggplot(fitanova1.mod,aes(Fitted, Residuals, colour=District))+geom_point()
x<-4L
class(x)
x <- c(4, TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- 1:4
y <- 2
x + y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] == 4
x[x < 10] <- 4
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x == 10] <- 4
x
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
read.csv(fil.choose())
data<-read.csv(file.choose())
data<-read.csv(file.choose())
data
head(data, n=2)
tail(data, n=2)
data[47,]
which(is.na(data$Ozone))
length(which(is.na(data$Ozone)))
length(Ozone)
length(Ozone)
length(data$Ozone)
153-37
mean(Data$Ozone)
sum(data$Ozone)
mean(data$ozone)
mean(x, na.rm=TRUE)
mean(data, na.rm=TRUE)
?colMeans
mean_values = colMeans(spam, na.rm = TRUE)
mean_values = colMeans(ozone, na.rm = TRUE)
mean_values = colMeans(data$ozone, na.rm = TRUE)
mean(data$ozone, na.rm=TRUE)
mean(data$ozone)
data
mean(data$ozone, NA.rm=TRUE)
newdata <- na.omit(data)
newdata
mean(data$ozone)
mean(newdata$ozone)
library(Rcmdr)
mean(data$Ozone, na.rm=TRUE)
attach(newdata)
attach(newdata)
newdata <- data[ which(Ozone>31 & Temp > 90),]
mean(newdata$Solar.R)
newdata <- data[ which(data$Ozone>31
& data$Solar.R > 90), ]
newdata <- data[ which(data$Ozone>31
& data$Temp > 90), ]
mean(newdata$Solar.R)
newdata <- mydata[ which(mydata$gender==6 , ]
newdata <- mydata[ which(mydata$gender==6  ]
newdata <- data[ which(mydata$gender==6  ]
newdata <- data[ which(mydata$gender==6 , ]
newdata <- data[ which(data$Ozone>31
& data$Temp > 90), ]
newdata <- data[ which(data$Month==6), ]
mean(newdata$Temp)
max(data$Ozone,data$Month==5)
newdata <- data[ which(data$Month==5), ]
max(newdata$Ozone)
which.max(newdata$Ozone)
newdata
max(newdata$Ozone)
newdata <- na.omit(data)
newdata
newdata <- newdata[ which(data$Month==5), ]
max(newdata$Ozone)
x <- 4
class(x)
x <- c(4, TRUE)
class(x)
x <- c(4, TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- 1:4
vector y <- 2
y <- 2
x + y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
pollutantmean<- function(directory, pollutant, id = 1:332) {
pollutantmean<- function(C:/Users/Larissa/Dropbox/rprog-data-specdata/specdata, pollutant, id = 1:332) {
pollutantmean<- function("C:/Users/Larissa/Dropbox/rprog-data-specdata/specdata", pollutant, id = 1:332) {
pollutantmean<- function(specdata, pollutant, id = 1:332) {
}
pollutantmean
source("pollutantmean.R")
source("pollutantmean.R")
setwd("C:/Users/Larissa/Dropbox/rprog-data-specdata/specdata")
source("pollutantmean.R")
pollutantmean(pollutant = "nitrate")
pollutantIsNotValid <- function(pollutantToCheck){
possiblePollutants <- c("sulfate", "nitrate")
!(match(pollutantToCheck, possiblePollutants) > 0 & !is.na(match(pollutantToCheck, possiblePollutants)))
}
pollutantmean <- function(directory = "~/Development/JHUDataScience/ProgrammingAssignment1/specdata", pollutant, id = 1:332) {
pollutantIsNotValid <- function(pollutantToCheck){
possiblePollutants <- c("sulfate", "nitrate")
!(match(pollutantToCheck, possiblePollutants) > 0 & !is.na(match(pollutantToCheck, possiblePollutants)))
}
pollutantmean <- function(directory = "C:/Users/Larissa/Dropbox/rprog-data-specdata/specdata", pollutant, id = 1:332) {
pollutant <- tolower(pollutant)
if(pollutantIsNotValid(pollutant)){
stop("Invalid pollutant provided. Valid pollutants are sulfate and nitrate.")
}
}
boundID <- function(idList){
use <- idList < 333 & idList > 0
if (length(idList[use]) != length(idList)){
cat("Some IDs have been removed from this list as they are out of range.\nCurrent range is 1-332.\n\n")
}
idList[use]
}
pollutantIsNotValid <- function(pollutantToCheck){
possiblePollutants <- c("sulfate", "nitrate")
!(match(pollutantToCheck, possiblePollutants) > 0 & !is.na(match(pollutantToCheck, possiblePollutants)))
}
directoryIsNotValid <- function(directory){
fileList <- list.files(path = directory)
!(fileList[1] == "001.csv")
}
pollutantmean <- function(directory = "C:/Users/Larissa/Dropbox/rprog-data-specdata/specdata", pollutant, id = 1:332) {
pollutant <- tolower(pollutant)
if(pollutantIsNotValid(pollutant)){
stop("Invalid pollutant provided. Valid pollutants are sulfate and nitrate.")
}
pollutant <- tolower(pollutant)
if(pollutantIsNotValid(pollutant)){
stop("Invalid pollutant provided. Valid pollutants are sulfate and nitrate.")
}
if(directoryIsNotValid(directory)){
stop("Invalid data directory provided. Please supply the correct path to the data.")
}
}
pollutantmean <- function(directory = "C:/Users/Larissa/Dropbox/rprog-data-specdata/specdata", pollutant, id = 1:332) {
filenames <- list.files(path=directory, pattern="*.csv")
vals <- vector()
for(i in id) {
## Pad the i to create a filename
filename <- sprintf("%03d.csv", i)
filepath <- paste(directory, filename, sep="/")
## Load the data from a specific file
data <- read.csv(filepath)
## Select our column
col <- data[,pollutant]
## Ignore NAs
col <- col[!is.na(col)]
## append to our vector
vals <- c(vals, col)
}
## Return the value rounded to 3 dec places
round(mean(vals), 3)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("pollutantmean", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("pollutantmean.R", "sulfate", 1:10)
pollutantmean("pollutantmean.R", "sulfate", 1:10)
pollutantmean("pollutantmean", "sulfate", 1:10)
pollutantmean("pollutantmean", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean <- function(directory = "C:/Users/Larissa/Dropbox/rprog-data-specdata/specdata", pollutant, id = 1:332) {
filenames <- list.files(path=directory, pattern="*.csv")
vals <- vector()
for(i in id) {
## Pad the i to create a filename
filename <- sprintf("%03d.csv", i)
filepath <- paste(directory, filename, sep="/")
## Load the data from a specific file
data <- read.csv(filepath)
## Select our column
col <- data[,pollutant]
## Ignore NAs
col <- col[!is.na(col)]
## append to our vector
vals <- c(vals, col)
}
## Return the value rounded to 3 dec places
round(mean(vals), 3)
}
pollutantmean("specdata", "nitrate", 70:72)
setwd("C:/Users/Larissa/Dropbox/rprog-data-specdata/specdata")
pollutantmean <- function(directory, pollutant="sulfate", id = 1:332) {
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(round(result, 3))
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant="sulfate", id = 1:332) {
if(grep("specdata", directory) == 1) {
directory <- ("C:/Users/Larissa/Dropbox/rprog-data-specdata/specdata")
}
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(round(result, 3))
}
pollutantmean("specdata", "sulfate", 1:10)
a
a
setwd("C:/Users/Larissa/Dropbox/rprog-data-specdata/specdata")
#getwd()
#list.files()
pollutantmean <- function(directory, pollutant="sulfate", id = 1:332) {
## Getting a list of filenames
filenames <- list.files(path=directory, pattern="*.csv")
## Initialising a vector to store values
vals <- vector()
## Loopping over the passed id's
for(i in id) {
## Pad the i to create a filename
filename <- sprintf("%03d.csv", i)
filepath <- paste(directory, filename, sep="/")
## Load the data from a specific file
data <- read.csv(filepath)
## Select our column
col <- data[,pollutant]
## Ignore NAs
col <- col[!is.na(col)]
## append to our vector
vals <- c(vals, col)
}
## Return the value rounded to 3 dec places
round(mean(vals), 3)
}
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
source("pollutantmean.R")
setwd("C:/Users/Larissa/Dropbox/rprog-data-specdata/specdata")
pollutantmean <- function(directory, pollutant="sulfate", id = 1:332) {
## Getting a list of filenames
filenames <- list.files(path=directory, pattern="*.csv")
## Initialising a vector to store values
vals <- vector()
## Loopping over the passed id's
for(i in id) {
## Pad the i to create a filename
filename <- sprintf("%03d.csv", i)
filepath <- paste(directory, filename, sep="/")
## Load the data from a specific file
data <- read.csv(filepath)
## Select our column
col <- data[,pollutant]
## Ignore NAs
col <- col[!is.na(col)]
## append to our vector
vals <- c(vals, col)
}
## Return the value rounded to 3 dec places
round(mean(vals), 3)
}
pollutantmean("specdata", "sulfate", 1:10)
n
